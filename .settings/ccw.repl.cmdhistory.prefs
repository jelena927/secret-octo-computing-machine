cmdhistory=["(foo)" "(foo 1\\n     )" "(foo \\"2\\")" "(ns browse-art.core)" "(foo 1\\n     )" "(ns)" "(in-ns)" "(ns-name)" "(use 'clojure.repl)" "(ns)" "(namespace)" "*ns*" "(in-ns user)" "(all-ns)" "(ns user)" "*ns*" "*NS*" "*ns*" "pagesList" "(crawl pagesList)" "(crawl pagesList 2)" "(crawl2 pagesList 2)" "(iterate inc 5)" "(crawl pagesList 2)" "(get-links pagesList)" "(crawl pagesList 2)" "(crawl pagesList 1)" "(crawl pagesList 3)" "(crawlPages pagesVector 3)" "(crawlPages pagesVector 1)" "(map + [1 2 3])" "(map \#(+ % 1) [1 2 3])" "(map \#(+ % 1) (map \#(+ % 1) [1 2 3]))" "(map \#(+ % 2) (map \#(+ % 1) [1 2 3]))" "(distinct (concat '(1 2 3) '(2 3 4)))" "(concat '(1 2 3) '(2 3 4))" "(distinct (concat (map \#(+ % 1) [1 2 3])))" "(map crawl pagesList)" "(map crawl pagesList 1)" "(map \#(crawl % 1) pagesList)" "(map \#(crawl % 1) pagesVector)" "(map \#(crawl % 2) pagesVector)" "(map \#(crawl % 3) pagesVector)" "(map \#(crawl % 1) pagesVector)" "pagesVector" "(map \#(crawl % 7) pagesVector)" "(map \#(crawl % 3) pagesVector)" "(loop [i 0]  \\r\\n  (when (< i 5)    \\r\\n    (println i)    \\r\\n    (recur (inc i)); loop i will take this value\\r\\n))" "(map crawl2 pageURL 1)" "(crawl2 pageURL)" "(crawl2 pageURL 1)" "(crawl pageURL 1)" "(crawl2 pageURL 1)" "1" "(crawl2 pageURL 2)" "(crawl3 page 2)" "(crawl3 pagesList 2)" "(crawl3 pagesVector 2)" "(indexer/add-to-index pagesVector)" "(map (indexer/add-to-index pagesVector))" "(map print (indexer/add-to-index pagesVector))" "(map seq (indexer/add-to-index pagesVector))" "(crawl3 pagesVector 2)" "(map get-links pagesVector)" "(jjj pageURL)" "($ (slurp\! page))" "(jjj pageURL)" "*ns*" "(jjj pageURL)" "*ns*" "(jjj pageURL)" "1" "(jjj pageURL)" "(jjj page-url)" "(get-html page-url)" "(get-text-only (get-html page-url))" "(map [1 2])" "\\n[1 2]" "(defn funkcija [x y] (x))" "(funkcija 1 2)" "(defn funkcija [x y] (print x))" "(funkcija 1 2)" "(defn funkcija [x y] (let [val x] vals))" "(funkcija 1 2)" "(defn funkcija [x y] (let [val x] val))" "(funkcija 1 2)" "(get-links (get-html page-url))" "(get-links (str (get-html page-url)))" "($ (get-html page-url) a)" "($ (get-html page-url) a[href])" "($ (get-html page-url) \\"a[href]\\")" "($ (get-html page-url) \\"a[href]\\" (attr \\"abs\:href\\"))" "($ (get-html page-url) \\"a\\" (attr \\"abs\:href\\"))" "(crawl-final pages-vector 1)" "pages-vector" "(crawl-final pages-vector 1)" "(map \#(indexer/add-to-index % (get-html %)) pages-vector)" "(map \#(conj new-pages (get-links %)) pages-vector)" "(map \#(conj [] (get-links %)) pages-vector)" "(def prazan [])" "(map \#(conj prazan (get-links %)) pages-vector)" "(def prazan [1])" "(map \#(conj prazan (get-links %)) pages-vector)" "(def prazan (transient []))" "(map \#(conj prazan (get-links %)) pages-vector)" "(map \#((persistent conj prazan (get-links %))) pages-vector)" "(map \#((persistent\! conj prazan (get-links %))) pages-vector)" "(map \#((persistent\! (conj prazan (get-links %)))) pages-vector)" "(map \#((persistent\! (conj\! prazan (get-links %)))) pages-vector)" "(map \#(conj\! prazan (get-links %)) pages-vector)" "(crawl-final pages-vector 1)" "(reduce (fn [page v]\\r\\n                (conj v (get-links page))) \\r\\n              [] \\r\\n              pages)" "(reduce (fn [page v]\\r\\n                (conj v (get-links page))) \\r\\n              [] \\r\\n              pages-vector)" "(get-links page-url)" "(reduce (fn [page v]\\r\\n                (conj v (get-links page))) \\r\\n              [] \\r\\n              pages-vector)" "(conj v (get-links page-url))" "(conj [] (get-links page-url))" "(conj [1] (get-links page-url))" "(concat  [1] (get-links page-url))" "(vec [1] (get-links page-url))" "(reduce (fn [page v]\\r\\n                (concat v (get-links page))) \\r\\n              [] \\r\\n              pages-vector)" "(reduce (fn [page v]\\r\\n                (into [] (concat v (get-links page))))\\r\\n              [] \\r\\n              pages)" "(reduce (fn [page v]\\r\\n                (into [] (concat v (get-links page))))\\r\\n              [] \\r\\n              pages-vector)" "(reduce (fn [page v]\\r\\n                (seq [] (concat v (get-links page))))\\r\\n              [] \\r\\n              pages-vector)" "(reduce (fn [page v]\\r\\n                (into [] (concat v (get-links page))))\\r\\n              [] \\r\\n              pages-vector)" "(get-links page-url)" "(concat [] (get-links page-url))" "(concat [1] (get-links page-url))" "(reduce (fn [page v]\\r\\n                (into v (concat v (get-links page))))\\r\\n              [] \\r\\n              pages-vector)" "(reduce (fn [page v]\\r\\n                (concat v (get-links page)))\\r\\n              '() \\r\\n              pages-vector)" "(reduce \#(concat %2 (get-links %1))\\r\\n              [] \\r\\n              pages-vector)" "(reduce \#(concat %2 (get-links %1))\\r\\n              '() \\r\\n              pages-vector)" "(reduce (fn [new one-page]\\r\\n                (println one-page)\\r\\n              [] \\r\\n              pages)" "(reduce (fn [new one-page]\\r\\n                (println one-page))\\r\\n              [] \\r\\n              pages)" "(reduce (fn [new one-page]\\r\\n                (println one-page))\\r\\n              [] \\r\\n              pages-vector)" "(reduce (fn [new one-page]\\r\\n                (println new))\\r\\n              [] \\r\\n              pages-vector)" "(reduce (fn [new one-page]\\r\\n                (concat new (get-links one-page)))\\r\\n              [] \\r\\n              pages-vector)" "(crawl-final pages-vector 1)" "(crawl-final pages-vector 2)" "(crawl-final pages-vector 3)" "(crawl-final pages-vector 1)" "(crawl-final pages-vector 2)" "(crawl-final pages-vector 3)" "(crawl-final pages-vector 1)" "(crawl-final pages-vector 2)" "(concat [] (get-links page-url))" "(concat [1] (get-links page-url))" "(vec (concat [1] (get-links page-url)))" "(crawl-final pages-vector 2)" "(reduce \\r\\n              (fn [new one-page]\\r\\n                (vec (concat new (get-links one-page))))\\r\\n              []\\r\\n              pages-vector)" "(conj [1] [2 3])" "(conj\! [1] [2 3])" "(concat [1] [2 3])" "(vec (concat [1] [2 3]))" "(crawl-final pages-vector 2)" "(crawl-final pages-vector 1)" "(def has-value (when true\\r\\n                            (println \\"Hello World\\")\\r\\n                            \\"Returned Value\\"))" "has-value" "(def has-value (when true \\r\\n                            \\"Returned Value\\"))" "has-value" "(def has-value (when true \\r\\n                            (print 1)(print 2))" "(def has-value (when true \\r\\n                            (print 1)(print 2)))" "has-value" "(def has-value (when 1\=\=1 \\r\\n                            (print 1)(print 2)))" "(def has-value (when (< 1 2) \\r\\n                            (print 1)(print 2)))" "has-value" "(def has-value (when (< 1 2) \\r\\n                            (1)(2)))" "(crawl-final pages-vector 2)" "(crawl-final pages-vector 1)" "(defn asd [] ((let [a 1] (print a))))" "(asd)" "(defn asd [] ((let [a 1] (print (+ 1 a)))))" "(asd)" "(defn asd [] ((let [a 1] (do ((+ a 1) (print a))))))" "(asd)" "(defn asd [] (let [a 1] (do ((+ a 1) (print a)))))" "(asd)" "(defn asd [] (let [a 1] (do ((+ a 1)))))" "(asd)" "(defn asd [] (let [a 1] (+ a 1)))" "(asd)" "(persistent\! (crawl-final pages-vector 2))" "(crawl-final pages-vector 2)" "(vec (crawl-final pages-vector 2))" "(loop [x 10]\\r\\n  (when (> x 1)\\r\\n    (println x)\\r\\n    (recur (- x 2))))" "[(loop [x 10]\\r\\n  (when (> x 1)\\r\\n    (println x)\\r\\n    (recur (- x 2))))]" "(defn a [] (do (print \\"a\\") (vec 1 2 3)))" "(a)" "(vec a 1)" "(list a 1)" "(defn a [] (do (print \\"a\\") (list 1 2 3)))" "(a)" "(defn a [] (do (+ 1 2) (list 1 2 3)))" "(a)" "(list? (a))" "(list? 1)" "(while (\= 1 1) (print 1)(print \\"1\\"))" "(while (\= 1 1) (print 1)(print \\"2\\"))" "(while (< i 3) (print 1)(+ i 1))" "(while (< i 3) (+ i 1)(print 1))" "(def i 0)" "1" "(while (< i 3) (+ i 1)(print 1))" "i" "(while (< i 3) ((+ i 1)(print 1)))" "(while (< i 3) (do (+ i 1)(print 1)))" "1\\n2" "pages-vector" "(crawl-final pages-vector)" "(get-links \\"google.rs\\")" "(get-links \\"www.google.rs\\")" "(get-links \\"http\://\\nwww.google.rs\\")" "(get-links page-url)" "(get-links \\"http\://www.google.rs\\")" "(get-links \\"http\://\\nwww.google.rs\\")" "(get-links \\"http\://   www.google.rs\\")" "(get-links \\"http\://www.google.rs\\")" "(crawl-final pages-vector)" "(get-links \\"http\://www.google.rs/chrome/index.html?hl\=sr&brand\=CHNG&utm_source\=sr-hpp&utm_medium\=hpp&utm_campaign\=sr\\")" "(get-links \\"http\://www.google.rs?hl\=sr&brand\=CHNG&utm_source\=sr-hpp&utm_medium\=hpp&utm_campaign\=sr\\")" "(crawl-final pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n              (for [link links]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (vec (conj new-pages (get (clojure.string/split link \#\\"\#\\") 0)))))));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n              (for [link links]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (vec (conj new-pages (get (clojure.string/split link \#\\"\#\\") 0)))))));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n              (println links)));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n              (println \\"***\\" links)));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n              (println \\"***\\" one-page \\"*\\" links)));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n              (for [link links]\\r\\n\\t              (println \\"***\\" one-page \\"*\\" link))));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n              (for [link links]\\r\\n\\t              (println \\"***\\" one-page \\"*\\" link))));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n\\t              (println \\"***\\" one-page \\"*\\" ));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(crawl-final pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n\\t              (println \\"***\\" one-page \\"*\\" ));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n              (for [link links]\\r\\n\\t              (println \\"***\\" one-page \\"*\\" link))));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n\\t              (println \\"***\\" one-page \\"*\\" links)));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(crawl-final pages-vector)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (let [links (get-links one-page)]\\r\\n\\t              (println \\"***\\" one-page \\"*\\" links)));ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages-vector)" "(crawl-final pages-vector)" "(crawl-final page-url)" "1" "(println (+ 0 (dbg (* 8 9))))" "(println (+ (* 2 3) (dbg (* 8 9))))" "(println (dbg (crawl-final page-url)))" "(crawl-final page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (conj new-pages (get (clojure.string/split link \#\\"\#\\") 0)))));ne valja\\r\\n         \\r\\n\\t        []\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (into new-pages (get (clojure.string/split link \#\\"\#\\") 0)))));ne valja\\r\\n         \\r\\n\\t        []\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (conj new-pages (get (clojure.string/split link \#\\"\#\\") 0)))));ne valja\\r\\n         \\r\\n\\t        []\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (println link)\\r\\n         \\r\\n\\t        []\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (println link))))\\r\\n         \\r\\n\\t        []\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (conj new-pages (get (clojure.string/split link \#\\"\#\\") 0)))));ne valja\\r\\n         \\r\\n\\t        []\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  ((type conj new-pages (get (clojure.string/split link \#\\"\#\\") 0))))));ne valja\\r\\n         \\r\\n\\t        []\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (type (conj new-pages (get (clojure.string/split link \#\\"\#\\") 0))))));ne valja\\r\\n         \\r\\n\\t        []\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (type (conj new-pages (get (clojure.string/split link \#\\"\#\\") 0))))));ne valja\\r\\n         \\r\\n\\t        [\\"\\"]\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (for [link (get-links one-page)]\\r\\n\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (conj new-pages (get (clojure.string/split link \#\\"\#\\") 0)))));ne valja\\r\\n         \\r\\n\\t        [\\"\\"]\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (reduce fn [links link](conj links link) [] (get-links one-page)\\n                    \\r\\n         \\r\\n\\t        [\\"\\"]\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (reduce fn [links link](conj links link) [] (get-links one-page)))\\n                    \\r\\n         \\r\\n\\t        [\\"\\"]\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (reduce (fn [links link](conj links link) [] (get-links one-page))))\\n                    \\r\\n         \\r\\n\\t        [\\"\\"]\\r\\n\\t        page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n              (reduce (fn [links link](conj links link)) [] (get-links one-page)))\\n                    \\r\\n         \\r\\n\\t        [\\"\\"]\\r\\n\\t        page-url)" "(crawl-final page-url)" "(reduce \\r\\n  (fn [new-pages one-page]\\r\\n    (conj (reduce \\r\\n            (fn [links link]\\r\\n              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                (conj links (get (clojure.string/split link \#\\"\#\\") 0)))) \\r\\n            (get-links one-page))))" "(reduce \\r\\n  (fn [new-pages one-page]\\r\\n    (conj (reduce \\r\\n            (fn [links link]\\r\\n              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                (conj links (get (clojure.string/split link \#\\"\#\\") 0)))) \\r\\n            (get-links one-page)))) []\\r\\n\\t        pages)" "(reduce \\r\\n  (fn [new-pages one-page]\\r\\n    (conj (reduce \\r\\n            (fn [links link]\\r\\n              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                (conj links (get (clojure.string/split link \#\\"\#\\") 0)))) \\r\\n            (get-links one-page)))) []\\r\\n\\t        page-url)" "(reduce \\r\\n            (fn [links link]\\r\\n              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                (conj links (get (clojure.string/split link \#\\"\#\\") 0)))) \\r\\n            (get-links \\"http\://google.com\\"))" "(reduce \\r\\n  (fn [links link]\\r\\n    (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n      (conj links (get (clojure.string/split link \#\\"\#\\") 0)))) \\r\\n  [] (get-links \\"http\://google.com\\"))" "(crawl-final page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (into new-pages (reduce \\r\\n                         (fn [links link]\\r\\n                           (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (conj links (get (clojure.string/split link \#\\"\#\\") 0)))) \\r\\n                        [] (get-links one-page)))\\r\\n;              (for [link (get-links one-page)]\\r\\n\\t              );ne valja\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        pages)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (into new-pages (reduce \\r\\n                         (fn [links link]\\r\\n                           (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link)))\\r\\n                  (conj links (get (clojure.string/split link \#\\"\#\\") 0)))) \\r\\n                        [] (get-links one-page)))\\r\\n\\t              )\\r\\n         ;add link ref\\r\\n\\t        []\\r\\n\\t        page-url)" "(get-links \\"http\://www.google.rs/language_tools?hl\=sr&authuser\=0\\")" "(get-links \\"http\://www.google.rs\\")" "(get-links \\"https\://www.google.rs/?gws_rd\=ssl\\")" "(crawl-final page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (into new-pages \\r\\n              (reduce \\r\\n\\t\\t            (fn [links link]\\r\\n;\\t\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link))) ;fali neki uslov\\r\\n\\t\\t                (conj links (get (clojure.string/split link \#\\"\#\\") 0)));) \\r\\n              ;add link ref\\r\\n\\t\\t\\t\\t         []\\r\\n\\t\\t\\t\\t         (get-links one-page))))\\r\\n\\t        []\\r\\n\\t        page-url)" "(get-links \\"www.google.rs\\")" "(get-links \\"http\://www.google.rs\\")" "(get-html \\"http\://www.google.rs\\")" "(get-links \\"http\://www.google.rs\\")" "(crawl-final page-url)" "(print 1)" "(vec 2 (print 1))" "(vec 2 3 (print 1))" "(seq 2 3 (print 1))" "(seq 2 3 )" "(vec 2 3 )" "(conj 2 3 )" "[ 2 3 ]" "[ 2 3 nil]" "(type (get [2 nil] 1))" "(get-links \\"http\://www.google.rs\\")" "(get-links \\"http\://www.google.asd\\")" "(crawl-final page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (into new-pages \\r\\n              (reduce \\r\\n\\t\\t            (fn [links link]\\r\\n\\t\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link))) ;fali neki uslov\\r\\n\\t\\t               (conj links (get (clojure.string/split link \#\\"\#\\") 0)))) \\r\\n              ;add link ref\\r\\n\\t\\t\\t\\t         []\\r\\n\\t\\t\\t\\t         (get-links one-page))))\\r\\n\\t        []\\r\\n\\t        page-url)" "(get-links \\"http\://www.google.rs/language_tools?hl\=sr&authuser\=0\\")" "(if true\\n  (do\\n    (+ 2 3)\\n    (- 4 1)))" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (into new-pages \\r\\n              (reduce \\r\\n\\t\\t            (fn [links link]\\r\\n\\t\\t              (if (and (\= (subs link 0 4) \\"http\\") (not (indexer/indexed? link))) \\r\\n\\t\\t               (do \\r\\n                     (indexer/add-link-ref one-page link (get-text-only link))\\r\\n                     (conj links (get (clojure.string/split link \#\\"\#\\") 0))))) \\r\\n              ;add link ref\\r\\n\\t\\t\\t\\t         []\\r\\n\\t\\t\\t\\t         (get-links one-page))))\\r\\n\\t        []\\r\\n\\t        page-url)" "(crawl-final page-url)" "(crawl-final page-url 1)" "(.indexOf \\"12\\")" "(.indexOf \\"12\\" \\"1\\")" "(.indexOf \\"12\\" \\"12\\")" "(.indexOf \\"12\\" \\"13\\")" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (into new-pages \\r\\n              (reduce \\r\\n\\t\\t            (fn [links link]\\r\\n\\t\\t              (if (and  (\= (.indexOf link \\"http\\") 0) (not (indexer/indexed? link))) \\r\\n\\t\\t               (do \\r\\n                     (indexer/add-link-ref one-page link (get-text-only link))\\r\\n                     (conj links (get (clojure.string/split link \#\\"\#\\") 0))))) \\r\\n              ;add link ref\\r\\n\\t\\t\\t\\t         []\\r\\n\\t\\t\\t\\t         (get-links one-page))))\\r\\n\\t        []\\r\\n\\t        page-url)" "(crawl-final page-url)" "(reduce \\r\\n\\t        (fn [new-pages one-page]\\r\\n            (do\\r\\n              (indexer/add-to-index one-page (get-html one-page))\\r\\n\\t            (into new-pages \\r\\n\\t              (reduce \\r\\n\\t\\t\\t            (fn [links link]\\r\\n\\t\\t\\t              (if (and  (\= (.indexOf link \\"http\\") 0) (not (indexer/indexed? link))) \\r\\n\\t\\t\\t                (do \\r\\n\\t                      (indexer/add-link-ref one-page link (get-text-only link))\\r\\n\\t                      (conj links (get (clojure.string/split link \#\\"\#\\") 0))))) \\r\\n\\t\\t\\t\\t\\t         []\\r\\n\\t\\t\\t\\t\\t         (get-links one-page)))))\\r\\n\\t        []\\r\\n\\t        page-url)" "1" "(get-text-only (get-html \\"http\://google.com\\"))" "(get-text-only (get-html \\"http\://www.google.com\\"))" "(get-text-only \\"<a>jel</a>\\")" "(get-text-only (get-html \\"http\://www.b92.net/\\"))" "(re-matches \#\\"hello.*\\" \\"hello, world\\")" "(re-matches \#\\"(\\\\b[^\\\\s]+\\\\b)\\" \\"hello, world\\")" "(re-matches \#\\"\\\\b[^\\\\s]+\\\\b\\" \\"hello, world\\")" "(re-matches (re-pattern \\"(\\\\b[^\\\\s]+\\\\b)\\") \\"hello, world\\")" "(re-pattern \\"(\\\\b[^\\\\s]+\\\\b)\\")" "(re-pattern \\"\\\\b[^\\\\s]+\\\\b\\")" "(re-seq \#\\"(\\\\b[^\\\\s]+\\\\b)\\" \\"the cat sat on the mat\\")" "(re-matches \#\\"(\\\\b[^\\\\s]+\\\\b)\\" \\"the cat sat on the mat\\")" "(re-seq \#\\"\\\\b[^\\\\s]+\\\\b\\" \\"the cat sat on the mat\\")" "(re-seq \#\\"\\\\b[^\\\\s]+\\\\b\\" \\"the cat sat on the mat. je@lasd\\")" "(separate-words \\"ads Jlene .a.a s\\"" "(separate-words \\"ads Jlene .a.a s\\")" "(get-html \\"http\://www.google.com\\")" "(get-html \\"http\://google.com\\")" "(get-html \\"google.com\\")" "(get-text-only (get-html \\"google.com\\"))" "(get-text-only (get-html \\"www.google.com\\"))" "(get-text-only (get-html \\"http\://www.google.com\\"))" "(crawl-final page-url)" "(crawl-final page-url 1)" "(save-message {\\"1\\" \\"2\\" \\"3\\"})" "(save-message {\:url-id \\"1\\" \:word-id \\"2\\" \:location \\"3\\"})" "(jdbc/with-connection db-spec\\r\\n  (jdbc/with-query-results res [\\"select * from word_location\\"] \\r\\n    (doall res)))" "(save-message {\:url-id \\"1\\" \:word-id \\"2\\" \:location \\"3\\"})" "(jdbc/with-connection db-spec\\r\\n  (jdbc/with-query-results res [\\"select * from word_location\\"] \\r\\n    (doall res)))" "(reduce (fn[counter i](println (inc counter))) 0 [\\"a\\" \\"b\\" \\"c\\" \\"d\\"])" "(reduce (fn[counter i](println (inc counter))) (atom 0) [\\"a\\" \\"b\\" \\"c\\" \\"d\\"])" "(reduce (fn[atom i](println (swap\! atom + 1))) (atom 0) [\\"a\\" \\"b\\" \\"c\\" \\"d\\"])" "(reduce (fn[atom i](println (swap\! atom + 1) atom)) (atom 0) [\\"a\\" \\"b\\" \\"c\\" \\"d\\"])" "(reduce (fn[atom i](swap\! atom + 1) atom) (atom 0) [\\"a\\" \\"b\\" \\"c\\" \\"d\\"])" "(reduce (fn[atom i](inc atom) 0 [\\"a\\" \\"b\\" \\"c\\" \\"d\\"])" "(reduce (fn[atom i](inc atom) 0 [\\"a\\" \\"b\\" \\"c\\" \\"d\\"]))" "(reduce (fn[a i](inc a) 0 [\\"a\\" \\"b\\" \\"c\\" \\"d\\"]))" "(reduce (fn[a i](inc a)) 0 [\\"a\\" \\"b\\" \\"c\\" \\"d\\"])" "(get-entry-id \\"word_location\\" \\"location\\" \\"1\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(if nil)" "(if (\= 1 nil))" "(if (\= 1 nil)1)" "(if nil 1)" "(if nil 1 2)" "(if-not nil 1 2)" "(if-not nil 1 false)" "(if-not nil true false)" "(type (if-not nil true false))" "(if 1 1 2)" "(if \\"a\\" 1 2)" "(get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(get \\"id\\" (get-entry-id \\"word_location\\" \\"location\\" \\"3\\"))" "(get 1 (get-entry-id \\"word_location\\" \\"location\\" \\"3\\"))" "(first (get-entry-id \\"word_location\\" \\"location\\" \\"3\\"))" "(get (first (get-entry-id \\"word_location\\" \\"location\\" \\"3\\")))" "(get \\"id\\" (first (get-entry-id \\"word_location\\" \\"location\\" \\"3\\")))" "(get (first (get-entry-id \\"word_location\\" \\"location\\" \\"3\\")) \:id)" "(get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(get-entry-id \\"word_location\\" \\"locatio\\nn\\" \\"3\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(indexed? \\"www.google\\")" "(db/get-entry-id \\"url_list\\" \\"url\\" \\"google\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(db/get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(db/get-entry-id \\"word_location\\" \\"location\\" \\"1\\")" "(jdbc/with-connection db-spec\\r\\n  (jdbc/with-query-results res [\\"select * from url_list\\"] ; ({\:last_name \\"aa\\", \:first_name \\"a\\", \:id 1} {\:last_name \\"bb\\", \:first_name \\"b\\", \:id 2} {\:last_name \\"cc\\", \:first_name \\"b\\", \:id 3})\\r\\n    (doall res)))" "(db/get-entry-id \\"url_list\\" \\"url\\" 1)" "(get-entry-id \\"url_list\\" \\"url\\" 1)" "(get-entry-id \\"url_list\\" \\"url\\" \\"1\\")" "(get-entry-id \\"url_list\\" \\"url\\" \\"www.google\\")" "(get-entry-id \\"url_list\\" \\"url\\" \\"1\\")" "(get-entry-id \\"url_list\\" \\"url\\" \\"a\\")" "(jdbc/with-connection db-spec\\r\\n    (jdbc/with-query-results res [(str \\"select id from \\" \\"url_list\\" \\" where \\" \\"url\\" \\"\=\\" \\"asd\\")]\\r\\n      (get (first res) \:id)))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/with-query-results res [(str \\"select id from \\" \\"url_list\\" \\" where \\" \\"url\\" \\"\=asd\\")]\\r\\n      (get (first res) \:id)))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/with-query-results res [(str \\"select id from url_list where url\=asd\\")]\\r\\n      (get (first res) \:id)))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/with-query-results res [(str \\"select id from url_list where url\='asd'\\")]\\r\\n      (get (first res) \:id)))" "(str \\"a\\")" "(str ' \\"a\\" )" "(str ' \\"a\\" ')" "(str ' \\"a\\" \\"'\\")" "(indexed? \\"www.google\\")" "(db/get-entry-id \\"url_list\\" \\"url\\" str(\\"'\\" \\"url\\" \\"'\\"))" "(str(\\"'\\" \\"url\\" \\"'\\")" "(indexed? \\"www.google\\")" "(crawl-final page-url)" "(jdbc/with-connection db-spec\\r\\n  (jdbc/with-query-results res [\\"select * from word_location\\"] \\r\\n    (doall res)))" "(crawl-final page-url)" "(add-to-index page-url (get-html page-url)" "(add-to-index page-url (get-html page-url))" "(db/get-entry-id \\"url_list\\" \\"url\\" (str \\"'\\" page-url \\"'\\"))" "page-url" "(add-to-index \\"http\://google.rs\\" (get-html \\"http\://google.rs\\"))" "(separate-words (get-text-only (get-html page-url)))" "(separate-words (get-text-only (get-html \\"http\://google.com\\")))" "(get-html \\"http\://google.com\\")" "(get-text-only (get-html \\"http\://google.com\\"))" "(separate-words (get-text-only (get-html \\"http\://google.com\\")))" "(str (get-text-only (get-html \\"http\://google.com\\")))" "(apply str (get-text-only (get-html \\"http\://google.com\\")))" "(separate-words (apply str (get-text-only (get-html \\"http\://google.com\\"))))" "(get-text-only (get-html \\"http\://google.com\\"))" "(add-to-index \\"http\://www.google.com\\")" "(add-to-index \\"http\://www.google.com\\" (get-html \\"http\://www.google.com\\"))" "(jdbc/with-connection db-spec\\r\\n  (jdbc/with-query-results res [\\"select * from word_location\\"] \\r\\n    (doall res))" "(jdbc/with-connection db-spec\\r\\n  (jdbc/with-query-results res [\\"select * from word_location\\"] \\r\\n    (doall res)))" "(indexed? \\"http\://www.google.com\\")" "(contains? ignore-words \\"not\\")" "(contains? ignore-words \\"in\\")" "(some ignore-words \\"in\\")" "(some \#(\= \\"in\\" %) ignore-words)" "(add-to-index \\"http\://www.google.com\\" (get-html \\"http\://www.google.com\\"))" "(indexed? \\"http\://www.google.com\\")" "(db/get-entry-id \\"url_list\\" \\"url\\" (str \\"'\\" \\"http\://www.google.com\\" \\"'\\"))" "(get-entry-id \\"word_location\\" \\"location\\" \\"1\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(generate-id \\"word-location\\")" "(generate-id \\"word_-location\\")" "(generate-id \\"word_location\\")" "(jdbc/with-connection db-spec\\r\\n    (jdbc/insert-values \:word_location []))" "(jdbc/with-connection db-spec\\r\\n  (jdbc/do-commands (str \\"insert into \\" \\"word_location\\")))" "(jdbc/with-connection db-spec\\r\\n  (jdbc/do-commands (str \\"insert into \\" \\"word_location DEFAULT VALUES \\")))" "(jdbc/with-connection db-spec\\r\\n  (jdbc/with-query-results res [\\"select * from word_location\\"] \\r\\n    (doall res)))" "(select-all \\"word-location\\")" "(select-all \\"'word-location'\\")" "(select-all \\"word-location\\")" "(select-all \\"word_location\\")" "(last (select-all \\"word_location\\"))" "(last (select-last \\"word_location\\"))" " (select-last \\"word_location\\")" "(defn select-last [table]\\r\\n\\t(jdbc/with-connection db-spec\\r\\n\\t  (jdbc/with-query-results res [\\"SELECT MAX(id) as last FROM word_location\\"] \\r\\n\\t    (get (first res) \:last))))" " (select-last \\"word_location\\")" "(generate-id \\"word_location\\")" "(select-all \\"word_location\\")" "(jdbc/with-connection db-spec\\r\\n     (jdbc/do-commands \\r\\n       (str \\"insert into word_location DEFAULT VALUES \\")\\r\\n       (select-last-id \\"word_location\\")))" "(jdbc/with-connection db-spec\\r\\n     (jdbc/do-commands \\r\\n       (str \\"insert into word_location DEFAULT VALUES \\")))" "(select-all \\"word_location\\")" "(jdbc/with-connection db-spec\\r\\n     (jdbc/do-commands \\r\\n       (select-last-id \\"word_location\\")))" "(jdbc/with-connection db-spec\\r\\n     (jdbc/do-commands \\r\\n       (str (select-last-id \\"word_location\\"))))" "(str (jdbc/with-connection db-spec\\r\\n     (jdbc/do-commands \\r\\n       (select-last-id \\"word_location\\"))))" "(select-last-id \\"word_location\\")" "(generate-id \\"word_location\\")" "(select-last-id \\"word_location\\")" "(select-all \\"word_location\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"a\\")" "(select-all \\"word_location\\")" "(create-new-entry \\"url_list\\" \\"url\\" \\"asd\\")" "(save-word-location {\:url-id 2 \:word-id 2 \:location \\"asd\\"})" "(save-word-location {\:url_id 2 \:word_id 2 \:location \\"asd\\"})" "{\:urls}" "{\:keys url}" "{\:keys \\"url\\"}" "(get {\:keys \\"url\\"} \:keys)" "{\:table {}}" "(get {\:table {}} \:table)" "(get {\:table {}})" "(create-new-entry \\"url_list\\" \\"url\\" \\"asdf\\")" "(save-record {\:url_id 2 \:word_id 2 \:location \\"asd\\"})" "(save-record \\"word_location\\" {\:url_id 2 \:word_id 2 \:location \\"asd\\"})" "(get (save-record \\"word_location\\" {\:url_id 2 \:word_id 2 \:location \\"asd\\"}) \:last_insert_rowid())" "(get (save-record \\"word_location\\" {\:url_id 2 \:word_id 2 \:location \\"asd\\"}) \:last_insert_rowid)" "(save-record \\"word_location\\" {\:url_id 2 \:word_id 2 \:location \\"asd\\"})" "(keys (save-record \\"word_location\\" {\:url_id 2 \:word_id 2 \:location \\"asd\\"}))" "{\:asd() 1}" "{\:asd() \\"a\\"}" "{\:asd \\"a\\"}" "{\:last_insert_rowid() 11}" "{\\"\:last_insert_rowid()\\" 11}" "(get (save-record \\"word_location\\" {\:url_id 2 \:word_id 2 \:location \\"asd\\"}) \\"\:last_insert_rowid()\\")" "(vals {\:asd \\"a\\"})" "(val {\:asd \\"a\\"})" "((vals {\:asd \\"a\\"}))" "(first (vals {\:asd \\"a\\"}))" "(first (vals (save-record \\"word_location\\" {\:url_id 2 \:word_id 2 \:location \\"asd\\"})))" "1" "(get-entry-id \\"word_location\\" \\"location\\" \\"2\\")" "(select-all \\"word-location\\")" "(select-all \\"word_location\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"asd\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(get-entry-id \\"word_location\\" \\"location\\" \\"qew\\")" "(defn create-new-entry [table field value] ;probaj da zamenis sa save-record\\r\\n  (first \\r\\n    (vals \\r\\n      (jdbc/with-connection db-spec\\r\\n        (jdbc/insert-values \:word_location [\:location] [\\"asd\\"])))))" "(first \\r\\n    (vals \\r\\n      (jdbc/with-connection db-spec\\r\\n        (jdbc/insert-values \:word_location [\:location] [\\"asd\\"]))))" "(get-entry-id \\"word_location\\" \\"location\\" \\"qew\\")" "(first \\r\\n    (vals \\r\\n      (jdbc/with-connection db-spec\\r\\n        (jdbc/insert-values (str \\"\:\\" table) [(str \\"\:\\" field)] [(str \\"'\\" value \\"'\\") ]))))" "(first \\r\\n    (vals \\r\\n      (jdbc/with-connection db-spec\\r\\n        (jdbc/insert-values \:word_location [\:location] [\\"asd\\"]))))" "(create-new-entry \\"word_location\\" \\"location\\" \\"a\\")" "(first \\r\\n    (vals \\r\\n      (jdbc/with-connection db-spec\\r\\n        (jdbc/insert-values \\"\:word_location\\" [\\"\:location\\"] [\\"asd\\"]))))" "(first \\r\\n    (vals \\r\\n      (jdbc/with-connection db-spec\\r\\n        (jdbc/insert-values (keyword word_location) [(keyword location)] [\\"asd\\"]))))" "(first \\r\\n    (vals \\r\\n      (jdbc/with-connection db-spec\\r\\n        (jdbc/insert-values (keyword \\"word_location\\") [(keyword \\"location\\")] [\\"asd\\"]))))" "(get-entry-id \\"word_location\\" \\"location\\" \\"qew\\")" "(get-field-value \\"word_location\\" \\"location\\" \\"qew\\")" "(get-field-value \\"word_location\\" \\"location\\" \\"3\\")" "(select-all \\"word_location\\")" "(create-new-entry \\"word_location\\" \\"location\\" \\"qew\\")" "(get-field-value \\"word_location\\" \\"location\\" \\"qew\\")" "(get-id \\"word_location\\" \\"location\\" \\"qew\\")" "(if (get-id \\"word_location\\" \\"location\\" \\"a\\") 1 2)" "(if (get-id \\"word_location\\" \\"location\\" \\"3\\") 1 2)" "(get-and-create-entry-id \\"word_location\\" \\"location\\" \\"3\\")" "(get-and-create-entry-id \\"word_location\\" \\"location\\" \\"asd\\")" "(get-and-create-entry-id \\"word_location\\" \\"location\\" \\"asdq\\")" "(indexed? \\"a\\")" "(db/select-all \\"url-list\\")" "(db/select-all \\"url_list\\")" "(db/create-new-entry \\"url_list\\" \\"url\\" \\"url1\\")" "(db/select-all \\"url-list\\")" "(db/select-all \\"url_list\\")" "(indexed? \\"url1\\")" "(db/select-all \\"word_location\\")" "(db/create-new-entry \\"url_list\\" \\"url\\" \\"url2\\")" "(indexed? \\"url2\\")" "(db/create-new-entry \\"url_list\\" \\"url\\" \\"url3\\")" "(indexed? \\"url3\\")" "(add-to-index \\"http\://www.google.es\\" (get-html \\"http\://www.google.es\\") )" "(db/select-all \\"url_list\\")" "(db/select-all \\"word_location\\")" "(separate-words (get-text-only (get-html \\"http\://www.google.es\\")))" "(db/select-all \\"word_list\\")" "(add-to-index \\"http\://www.google.es\\" (get-html \\"http\://www.google.es\\") )" "(add-to-index \\"http\://www.google.ru\\" (get-html \\"http\://www.google.es\\") )" "(db/select-all \\"url_list\\")" "(add-to-index \\"http\://u\\" (get-html \\"http\://www.google.es\\") )" "(db/select-all \\"url_list\\")" "(add-to-index \\"url1\\" (get-html \\"http\://www.google.es\\") )" "(db/select-all \\"url_list\\")" "(add-to-index \\"url1\\" (get-html \\"http\://www.google.es\\") )" "(add-to-index \\"url4\\" (get-html \\"http\://www.google.es\\") )" "(db/get-and-create-entry-id \\"url_list\\" \\"url\\" \\"url4\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"Programas\\")" "(db/select-all \\"url_list\\")" "(db/select-all \\"word_list\\")" "(reduce \\r\\n\\t     (fn [counter word]\\r\\n\\t\\t     (if-not (some \#(\= word %) ignore-words)\\r\\n\\t\\t       (db/save-word-location {\:url-id url-id \\r\\n\\t\\t                               \:word-id (db/get-and-create-entry-id \\"word_list\\" \\"word\\" word) \\r\\n\\t\\t                               \:location (inc counter)})))\\r\\n       0\\r\\n\\t    (separate-words (get-text-only (get-html \\"http\://www.google.es\\"))))" "(reduce \\r\\n\\t     (fn [counter word]\\r\\n\\t\\t     (if-not (some \#(\= word %) ignore-words)\\r\\n\\t\\t       (db/save-word-location {\:url-id 1 \\r\\n\\t\\t                               \:word-id (db/get-and-create-entry-id \\"word_list\\" \\"word\\" word) \\r\\n\\t\\t                               \:location (inc counter)})))\\r\\n       0\\r\\n\\t    (separate-words (get-text-only (get-html \\"http\://www.google.es\\"))))" "(reduce \\r\\n\\t     (fn [counter word]\\r\\n\\t\\t     (if-not (some \#(\= word %) ignore-words)\\r\\n\\t\\t       (db/save-word-location {\:url-id 1 \\r\\n\\t\\t                               \:word-id (db/get-and-create-entry-id \\"word_list\\" \\"word\\" word) \\r\\n\\t\\t                               \:location counter}) (inc counter)))\\r\\n       0\\r\\n\\t    (separate-words (get-text-only (get-html \\"http\://www.google.es\\"))))" "(db/select-all \\"word_list\\")" "(db/select-all \\"word_location\\")" "(add-to-index \\"http\://www.google.fr\\" (get-html \\"http\://www.google.fr\\"))" "(separate-words (get-text-only (get-html \\"http\://www.google.fr\\")))" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"d'entreprise+Google\u00C0\\")" "(separate-words (get-text-only (get-html \\"http\://www.google.es\\")))" "(separate-words (get-text-only (get-html \\"http\://www.google.rs\\")))" "(separate-words (get-text-only (get-html \\"http\://www.google.com\\")))" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"'d'entreprise+Google\u00C0'\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"'d''entreprise+Google\u00C0'\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"'d\\\\'entreprise+Google\u00C0'\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"d\\\\'entreprise+Google\u00C0\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"d/'entreprise+Google\u00C0\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"d/'entreprise\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"$$d'entreprise\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"$$d'entreprise$$\\")" "(db/get-and-create-entry-id \\"word_list\\" \\"word\\" \\"d''entreprise\\")" "(db/select-all \\"word_list\\")" "(def l (1 2 3))" "(def l '(1 2 3))" "(get l 1\\n     )" "(get 1 l\\n     )" "((l) 0)" "(seq \\"a b c\\")" "((seq \\"a b c\\") 0)" "(nth l 0)" "(nth l 1)" "([][][])" "[[][][]]" "[[1] [2] [3]]" "(nth [[1] [2] [3]] 1)" "{}" "{\:field-list [] \:table-list [] \:clause-list []}" "(get \:table-list {\:field-list [] \:table-list [] \:clause-list []})" "(get \:table-list {\:field-list [] \:table-list [1 2] \:clause-list []})" "(get {\:field-list [] \:table-list [1 2] \:clause-list []} \:table-list )" "(get {\:field-list [\\"w0.url_id\\"] \:table-list [] \:clause-list []} \:field-list)" "(conj (get {\:field-list [\\"w0.url_id\\"] \:table-list [] \:clause-list []} \:field-list) \\"a\\")" "(def a (get {\:field-list [\\"w0.url_id\\"] \:table-list [] \:clause-list []} \:field-list))" "(conj a \\"a\\")" "a" "(format \\"%s enjoyed %s%%.\\" \\"Mozambique\\" 19.8)" "(format \\"%s enjoyed %s%.\\" \\"Mozambique\\" 19.8)" "(format \\"%s enjoyed %s.\\" \\"Mozambique\\" 19.8)" "(format \\"%s enjoyed %s.\\" \\"Mozambique\\" )" "(format \\"%s enjoyed %d.\\" \\"Mozambique\\" )" "(format \\"%s enjoyed %d.\\" \\"Mozambique\\" 19.8)" "(format \\"%s enjoyed .\\" \\"Mozambique\\" 19.8)" "(join \\"1\\" \\"a\\")" "(str/join \\"1\\" \\"a\\")" "(clojure.string/join \\"1\\" \\"a\\")" "(clojure.string/join \\"a\\" \\"a\\")" "{(print \\"a\\")}" "{\:a (print \\"a\\")}" "{\:a (+ 1 2)}" "(join (1 2 3))" "(join '(1 2 3))" "(clojure.string/join '(1 2 3))" "(clojure.string/join \\",\\" '(1 2 3))" "(select-all \\"word_list\\")" "(select-all \\"word_location\\")" "(crawl-final [\\"http\://www.google.si\\"] )" "(select-all \\"word_list\\")" "(db/select-all \\"word_list\\")" "(clojure.string/substring \\"asd0\\" 1)" "1" "(clojure.string/substring 1 \\"asd0\\")" "1" "(subs \\"ads\\" 1)" "(subs \\"ads\\" 2)" "(get-match-rows \\"napredna\\")" "(db/select-all \\"word_list\\")" "(get-match-rows \\"Natisni\\")" "(db/get-word-id \\"Natisni\\")" "(str \\"1\\" \\"a\\")" "(format \\"1\\" \\"a\\")" "(format \\"1\\" \\"2\\")" "(get-match-rows \\"Natisni\\")" "(get-match-rows \\"Natisni me\\")" "(reduce \\r\\n       (fn[acc word]\\r\\n         (if-let [word-id (db/get-word-id word)]\\r\\n           (let [table-number (get acc \:table-number)]\\r\\n           {\:field-list (str (get acc \:field-list) \\", \\" (format \\" w%s.location \\" table-number))\\r\\n           \:table-list (str (get acc \:table-list) (if (> table-number 0) \\", \\") (format \\"word_location w%s \\" table-number))\\r\\n           \:clause-list \\r\\n           (str \\r\\n             (get acc \:clause-list) (if (> table-number 0)(format \\" and w%s.url_id\=w%s.url_id and \\" (- table-number 1) table-number)) \\r\\n                (format \\"w%s.word_id\=%s \\" table-number word-id))\\r\\n           \:table-number (inc table-number)})))\\r\\n         {\:field-list \\"w0.url_id\\" \:table-list \\"\\" \:clause-list \\"\\" \:table-number 0}\\r\\n         (clojure.string/split \\"Natisni me\\" \#\\" \\"))" "(reduce \\r\\n       (fn[acc word]\\r\\n         (if-let [word-id (db/get-word-id word)]\\r\\n           (str word))\\r\\n         {\:field-list \\"w0.url_id\\" \:table-list \\"\\" \:clause-list \\"\\" \:table-number 0}\\r\\n         (clojure.string/split \\"Natisni me\\" \#\\" \\"))" "(reduce \\r\\n       (fn[acc word]\\r\\n         (if-let [word-id (db/get-word-id word)]\\r\\n           (str word)))\\r\\n         {\:field-list \\"w0.url_id\\" \:table-list \\"\\" \:clause-list \\"\\" \:table-number 0}\\r\\n         (clojure.string/split \\"Natisni me\\" \#\\" \\"))" "(reduce \\r\\n  (fn[acc word]\\r\\n      (str word))\\r\\n  {\:field-list \\"w0.url_id\\" \:table-list \\"\\" \:clause-list \\"\\" \:table-number 0}\\r\\n  (clojure.string/split \\"Natisni me\\" \#\\" \\"))" "(clojure.string/split \\"Natisni me\\" \#\\" \\")" "(reduce \\r\\n  (fn[acc word]\\r\\n      (str word))\\r\\n  {\:field-list \\"w0.url_id\\" \:table-list \\"\\" \:clause-list \\"\\" \:table-number 0}\\r\\n  (clojure.string/split \\"Natisni me\\" \#\\" \\"))" "(reduce \\r\\n  (fn[acc word]\\r\\n      (println word))\\r\\n  {\:field-list \\"w0.url_id\\" \:table-list \\"\\" \:clause-list \\"\\" \:table-number 0}\\r\\n  (clojure.string/split \\"Natisni me\\" \#\\" \\"))" "(db/select-all \\"word_list\\")" "(get-match-rows \\"Namestite Slovenija\\")" "(get-match-rows \\"Google\\")" "(get-match-rows \\"google\\")" "(get-match-rows \\"Google\\")" "(get-match-rows \\"Google pretraga\\")" "(get-match-rows \\"Google es\\")" "(get-match-rows \\"Google \u043F\u0440\u0435\u0442\u0440\u0430\u0433\u0430\\")" "(get-match-rows \\"\u0418\u0437 \u043F\u0440\u0432\u0435 \u0440\u0443\u043A\u0435\\")" "(db/select-all \\"word_list\\")" "(get-match-rows \\"Uporabniki Zemljevide\\")" "(get-match-rows \\"Espa\u00F1a\\")" "(get-match-rows \\"Play Youtube\\")" "(get-match-rows \\"Play YouTube\\")" "(db/create-db)" "(db/create-tables)" "(db/create-index)" "(crawl-final [http\://google.rs])" "(crawl-final [\\"http\://google.rs\\"])" "(db/select-all \\"word_list\\")" "(get-match-rows \\"YouTube\\")" "(get-match-rows \\"YouTube-y\\")" "(get-match-rows \\"YouTube-a\\")" "(get-match-rows \\"2015\\")" "()db/select-all \\"word_location\\")" "(db/select-all \\"word_location\\")" "(db/select-all \\"message\\")" "(get-match-rows \\"message\\")" "(crawl-final [\\"http\://google.com\\"])" "(db/select-all \\"word_list\\")" "(crawl-final [\\"https\://www.google.co.uk\\"])" "(db/select-all \\"word_list\\")" "*ns*" "(get-match-rows \\"google\\")" "(get-match-rows \\"Google\\")" "(get-match-rows \\"Google search\\")" "(get-match-rows \\"Google message\\")" "(get-match-rows \\"Google Sign\\")" "(get-match-rows \\"Google Sign More\\")" "(get-scored-list (get-match-rows \\"Google Sign More\\"))" "(def person {\:name \\"Steve\\" \:age 24 \:salary 7886 \:company \\"Acme\\"})" "(get person \:name)" "(get person)" "\\nperson" "(find person \:name)" "(key {\:a 1})" "(key [\:a 1])" "(normalize-scores {\:1 1 \:2 2} false)" "(/ (float 2) (if (zero? 1) 2 1)" "(/ (float 2) (if (zero? 1) 2 1))" "(/ (float 2) (if (zero? 1) 2 2))" "(apply max [1 2 3])" "(zero?(apply max [1 2 3]))" "(normalize-scores {\:1 1 \:2 2} false)" "(normalize-scores {\:1 1 \:2 2} true)" "( (apply min (vals {\:1 1 \:2 2} )))" " (apply min (vals {\:1 1 \:2 2} ))" "(reduce \#(assoc % (key %2) (/ (float (min-score)) (max v-small (val %2)))) {} {\:1 1 \:2 2})" "(reduce \#(assoc % (key %2) (/ (float (1)) (max 0.00001 (val %2)))) {} {\:1 1 \:2 2})" "(max 0.00001 2)" "(reduce \#(assoc % (key %2) (val %2) {} {\:1 1 \:2 2})" "(reduce \#(assoc % (key %2) (val %2)) {} {\:1 1 \:2 2})" "(reduce \#(assoc % (key %2) (max 1 (val %2))) {} {\:1 1 \:2 2})" "(reduce \#(assoc % (key %2) ( / 2 (max 1 (val %2)))) {} {\:1 1 \:2 2})" "(normalize-scores {\:1 1 \:2 2} true)" "(normalize-scores {\:1 1 \:2 2} false)" "(get {} \:id)" "(get {\:id 1} \:id)" "(contains? {\:id 1} \:id)" "(contains? {\\n            } \:id)" "(frequecy-score ({} {\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"1\\"}))" "(frequecy-score ( {\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"1\\"}))" "(frequecy-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"1\\"}))" "(frequecy-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"2\\"}))" "(if (contains? {} (keyword (get {\:location \\"0\\", \:url_id \\"1\\"} \:url_id)))" "(if (contains? {} (keyword (get {\:location \\"0\\", \:url_id \\"1\\"} \:url_id))))" "(contains? {} (keyword (get {\:location \\"0\\", \:url_id \\"1\\"} \:url_id)))" "(frequecy-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"2\\"}))" "(get {\:location \\"0\\", \:url_id \\"1\\"}  \:url_id)" "(keyword \\"1\\")" "(frequecy-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"2\\"}))" "(frequecy-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"1\\"} \\n   {\:location \\"10\\", \:url_id \\"2\\"} {\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"} {\:location \\"237\\", \:url_id \\"7\\"}))" "(frequecy-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"10\\", \:url_id \\"1\\"} \\n   {\:location \\"10\\", \:url_id \\"2\\"} {\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"}  {\:location \\"237\\", \:url_id \\"7\\"}))" "(def a nil)" "a" " (and a (\= a 0))" "(if (and a (\= a 0)) 1 2)" "(sum (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))" "(+ (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))" "(apply + (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))" " (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"})" "(next (first {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))" "(next (last {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))" "(last {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"})" "(rest (last {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))" "(vec {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"})" "(pop (vec {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))" "(pop (vec (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"})))" "(apply + (pop (vec (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))))" "(apply Integer/parseInt (pop (vec (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))))" "(Integer/parseInt \\"1\\")" "(apply \#(Integer/parseInt %) (pop (vec (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))))" "(ints [\\"1\\" \\"2\\"])" "(int-arr [\\"1\\" \\"2\\"])" "(int-array [\\"1\\" \\"2\\"])" "(read-string \\"1\\")" "(type?(read-string \\"1\\"))" "(type(read-string \\"1\\"))" "(apply read-string (pop (vec (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))))" "(reduce \#(+ (Integer/parseInt %2) %) 0 (pop (vec (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))))" "(location-score {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"})" "(frequecy-score {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"})" "(reduce \\r\\n                    \#(+ (Integer/parseInt %2) %) \\r\\n                    0 \\r\\n                    (pop (vec (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"})))" "(reduce \\r\\n                    \#(+ (Integer/parseInt %2) %) \\r\\n                    0 \\r\\n                    (pop (vec (vals {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}))))" "(frequecy-score {\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"})" "(frequecy-score ({\:location_3 \\"9\\", \:location_2 \\"13\\", \:url_id \\"19\\"} ))" "(frequecy-score ({\:location_3 \\"9\\", \:location_2 \\"13\\", \:url_id \\"19\\"} {\:location_3 \\"9\\", \:location_2 \\"13\\", \:url_id \\"19\\"})\\n                {\:location_3 \\"9\\", \:location_2 \\"13\\", \:url_id \\"1\\"})" "(frequecy-score (({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} \\r\\n{\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} \\r\\n{\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"}))" "(frequecy-score ({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} \\r\\n{\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} \\r\\n{\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"}))" "(location-score ({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} \\r\\n{\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} \\r\\n{\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"}))" "(location-score{\:location_3 \\"9\\", \:location_2 \\"13\\", \:url_id \\"19\\"} )" "(location-score {\:location_3 \\"9\\", \:location_2 \\"13\\", \:url_id \\"19\\"} )" "(frequecy-score {\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} \\r\\n{\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} \\r\\n{\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"})" "(frequecy-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} \\r\\n{\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} \\r\\n{\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"}))" "(location-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} \\r\\n{\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} \\r\\n{\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"}))" "(location-score '({\:location \\"0\\", \:url_id \\"1\\"}))" "\=> (location-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"1\\"}))" "(location-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"1\\"}))" "(location-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"5\\", \:url_id \\"1\\"}))" "(location-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"5\\", \:url_id \\"2\\"}))" "(location-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"5\\", \:url_id \\"2\\"} {\:location \\"5\\", \:url_id \\"2\\"}))" "(location-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"5\\", \:url_id \\"2\\"} {\:location \\"7\\", \:url_id \\"2\\"}))" "(location-score '({\:location \\"0\\", \:location2 \\"3\\", \:url_id \\"1\\"} {\:location \\"5\\", \:location2 \\"3\\", \:url_id \\"2\\"} {\:location \\"7\\", \:location2 \\"3\\", \:url_id \\"2\\"}))" "(first ({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} )" "(first '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(alength (first '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} )))" "(count (first '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} )))" "(distance-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(assoc % (key %2) 1.0) {} '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce % '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(println % ) '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(println %2 ) '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(println %3 ) '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(println %2 ) '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(println (vals %2 )) '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(map \#(vector (first %) (* 2 (second %))) '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(map \#(vector (get % \:url_id) 1.0) '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(map \#(hash-map (get % \:url_id) 1.0) '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(map \#(hash-map (keyword (get % \:url_id)) 1.0) '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(hash-map (keyword (get % \:url_id)) 1.0) '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(hash-map (keyword (get % \:url_id)) 1.0) {} '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(reduce \#(assoc (keyword (get % \:url_id)) 1.0) {} '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(key {\:1 1})" "(keys {\:1 1})" "(first (keys {\:1 1}))" "(distance-score '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(get {\:location \\"0\\", \:url_id \\"2\\"} 1)" "(nth {\:location \\"0\\", \:url_id \\"2\\"} 1)" "(vals {\:location \\"0\\", \:url_id \\"2\\"} )" "(get (vals {\:location \\"0\\", \:url_id \\"2\\"} ) 1)" "(nth (vals {\:location \\"0\\", \:url_id \\"2\\"} ) 1)" "(get 1 (vals {\:location \\"0\\", \:url_id \\"2\\"} ))" "(count {\:location \\"0\\", \:url_id \\"2\\"})" "(Math.abs 1)" "(java.lang.Math/abs 1)" "(java.lang.Math/abs -1)" "(distance-score '({\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"20\\", \:url_id \\"1\\"} ))" "(distance-score '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"} ))" "(let [locations (vals {\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"})\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           (assoc \\r\\n\\t             current-key\\r\\n\\t\\t           (loop [x 2\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (nth locations x) (nth locations (- x 1))))))\\r\\n                  (if \\r\\n                    (and \\r\\n                      (contains? acc current-key)\\r\\n                      (> (get acc current-key) dist))\\r\\n                    (get acc current-key)\\r\\n                     dist)))))" "(let [locations (vals {\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"})\\r\\n                 current-key (keyword (get {\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} \:url_id))]\\r\\n\\t           (assoc \\r\\n\\t             current-key\\r\\n\\t\\t           (loop [x 2\\r\\n\\t\\t                  y (- (count {\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"}) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (nth locations x) (nth locations (- x 1))))))\\r\\n                  (if \\r\\n                    (and \\r\\n                      (contains? acc current-key)\\r\\n                      (> (get acc current-key) dist))\\r\\n                    (get acc current-key)\\r\\n                     dist)))))" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           (assoc \\r\\n\\t             current-key\\r\\n\\t\\t           (loop [x 2\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (nth locations x) (nth locations (- x 1))))))\\r\\n                  (if \\r\\n                    (and \\r\\n                      (contains? acc current-key)\\r\\n                      (> (get acc current-key) dist))\\r\\n                    (get acc current-key)\\r\\n                     dist))))))\\r\\n         {}\\r\\n         {\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"} )" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           (assoc \\r\\n\\t             current-key\\r\\n\\t\\t           (loop [x 2\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (nth locations x) (nth locations (- x 1))))))\\r\\n                  (if \\r\\n                    (and \\r\\n                      (contains? acc current-key)\\r\\n                      (> (get acc current-key) dist))\\r\\n                    (get acc current-key)\\r\\n                     dist))))))\\r\\n         {}\\r\\n         '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"}) )" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           \\r\\n\\t\\t           (loop [x 2\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (nth locations x) (nth locations (- x 1))))))\\r\\n                  (println x y dist \\r\\n                     )))))\\r\\n         {}\\r\\n         '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"}) )" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           \\r\\n\\t\\t           (loop [x 2\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (<\= x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (nth locations x) (nth locations (- x 1))))))\\r\\n                  (println x y dist \\r\\n                     )))))\\r\\n         {}\\r\\n         '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"}) )" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           \\r\\n\\t\\t           (loop [x 1\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (nth locations x) (nth locations (- x 1))))))\\r\\n                  (println x y dist \\r\\n                     )))))\\r\\n         {}\\r\\n         '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"}) )" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           \\r\\n\\t\\t           (loop [x 1\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (read-string (nth locations x))  (read-string (nth locations (- x 1)))))))\\r\\n                  (println x y dist \\r\\n                     )))))\\r\\n         {}\\r\\n         '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"}) )" "(distance-score '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"} ))" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           \\r\\n\\t\\t           (loop [x 1\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (read-string (nth locations x))  (read-string (nth locations (- x 1)))))))\\r\\n                  (println x y dist \\r\\n                     )))))\\r\\n         {}\\r\\n         '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"}) )" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           (assoc \\r\\n\\t             current-key\\r\\n\\t\\t           (loop [x 1\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (read-string (nth locations x))  (read-string (nth locations (- x 1)))))))\\r\\n                  (if \\r\\n                    (and \\r\\n                      (contains? acc current-key)\\r\\n                      (> (get acc current-key) dist))\\r\\n                    (get acc current-key)\\r\\n                     dist)\\r\\n                     )))))\\r\\n         {}\\r\\n         '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"}) )" "(reduce\\r\\n         (fn \\r\\n           [acc row]\\r\\n           (let [locations (vals row)\\r\\n                 current-key (keyword (get row \:url_id))]\\r\\n\\t           (assoc \\n               acc\\r\\n\\t             current-key\\r\\n\\t\\t           (loop [x 1\\r\\n\\t\\t                  y (- (count row) 1)\\r\\n                      dist 0]\\r\\n\\t              (if (< x y)\\r\\n\\t\\t\\t\\t\\t\\t\\t    (recur (+ x 1) y (+ dist (java.lang.Math/abs (- (read-string (nth locations x))  (read-string (nth locations (- x 1)))))))\\r\\n                  (if \\r\\n                    (and \\r\\n                      (contains? acc current-key)\\r\\n                      (> (get acc current-key) dist))\\r\\n                    (get acc current-key)\\r\\n                     dist)\\r\\n                     )))))\\r\\n         {}\\r\\n         '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"}) )" "(distance-score '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"7\\", \:url_id \\"1\\"} ))" "(distance-score '({\:location \\"0\\", \:location2 \\"4\\", \:url_id \\"2\\"} {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"1\\"} ))" "(distance-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"1\\"} ))" "(frequecy-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"1\\"} ))" "(location-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"1\\"} ))" "(frequecy-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"1\\"} ))" "(normalize-scores {\:1 1})" "(normalize-scores {\:1 1} true)" "(normalize-scores {\:1 1} false)" "(frequecy-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"1\\"} ))" "(get-url-name \\"1\\")" "(get-url-name \\"3\\")" "(get-url-name \\"2\\")" "(get-url-name \\"1\\")" "(get-url-name \\"6\\")" "(get-url-name \\"61\\")" "(+ nil 9)" "(frequecy-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"1\\"} ))" "(frequecy-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(distance-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(location-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(sort (vals {\:3 1.0, \:1 0.6}))" "(sort-by val > {\:3 1.0, \:1 0.6})" "(sort-by val  {\:3 1.0, \:1 0.6})" "(sort-by > {\:3 1.0, \:1 0.6})" "(sort-by > {\:3 1.0, \:1 1.6})" "(sort-by val > {\:3 1.0, \:1 1.6})" "(frequecy-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(frequecy-score '(  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(distance-score '(  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(distance-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(location-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(location-score '(  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(location-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}  {\:location \\"2\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(location-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}  {\:location \\"4\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "'(1.0 {\:3 0.9047619047619048, \:1 1.0})" "(get '(1.0 {\:3 0.9047619047619048, \:1 1.0}) 1)" "(second '(1.0 {\:3 0.9047619047619048, \:1 1.0}))" "(def m {\:rows ({\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}), \:word-ids [1 1160 1156]})" "(def m {\:rows '({\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}), \:word-ids [1 1160 1156]})" "(\:rows m)" "(get-scored-list (\:rows m) (\:word-ids m))" "(distance-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(location-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(frequecy-score '( {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}  {\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"}{\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(get-scored-list (\:rows m) (\:word-ids m))" "(def w [(1.0 (frequecy-score rows))\\r\\n                  (1.5 (location-score rows));{\:3 1.0, \:1 1.0}\\r\\n          (2.0 (distance-score rows))])" "(def w [(1.0 (frequecy-score (\:rows m)))\\r\\n                  (1.5 (location-score (\:rows m)));{\:3 1.0, \:1 1.0}\\r\\n          (2.0 (distance-score (\:rows m)))])" "(get-scored-list (\:rows m) (\:word-ids m))" "m" "(def m {\:rows ({\:location_3 \\"9\\", \:location_2 \\"13\\", \:location \\"0\\", \:url_id \\"19\\"}\\n                {\:location_3 \\"3\\", \:location_2 \\"5\\", \:location \\"30\\", \:url_id \\"7\\"}), \:word-ids [1 1160 1156]})" "(get-scored-list (\:rows m) (\:word-ids m))" "m" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}) [1 100 2])" "(frequecy-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\r\\n                       {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(distance-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\r\\n                       {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(location-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\r\\n                       {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(merge {\:3 0, \:1 0} {\:3 1.0, \:1 1.0})" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}) [1 100 2])" "(reduce \\r\\n            (fn [total-scores row]\\r\\n              (let [current-key (keyword (\:url_id row))]\\r\\n              (assoc total-scores \\r\\n                     current-key \\r\\n                     (if (contains? total-scores current-key)\\r\\n                       (+ (current-key total-scores) (* (first '(1.0 {\:3 1.0, \:1 1.0})) (current-key (second '(1.0 {\:3 1.0, \:1 1.0})))))\\r\\n                       1))))\\r\\n            {} \\r\\n            '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\r\\n                       {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(reduce \\r\\n            (fn [total-scores row]\\r\\n              (let [current-key (keyword (\:url_id row))]\\r\\n              (assoc total-scores \\r\\n                     current-key \\r\\n                     (if (contains? total-scores current-key)\\r\\n                       (+ (current-key total-scores) (* (first '(1.0 {\:3 1.0, \:1 1.0})) (current-key (second '(1.0 {\:3 1.0, \:1 1.0})))))\\r\\n                       (* (first '(1.0 {\:3 1.0, \:1 1.0})) (current-key (second '(1.0 {\:3 1.0, \:1 1.0}))))))))\\r\\n            {} \\r\\n            '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\r\\n                       {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}) [1 100 2])" "(reduce \\r\\n       (fn [acc weight]\\r\\n          (reduce \\r\\n            (fn [total-scores score]\\r\\n              (let [current-key (key score)]\\r\\n              (assoc total-scores \\r\\n                     current-key \\r\\n                     (if (contains? total-scores current-key)\\r\\n                       (+ (current-key total-scores) (* (first weight) (val score)))\\r\\n                       (* (first weight) (val score))))))\\r\\n            {} \\r\\n            (second weight)))\\r\\n       {} \\r\\n       ['(1.0 (frequecy-score rows))\\r\\n                  '(1.5 (location-score rows));{\:3 1.0, \:1 1.0}\\r\\n                  '(2.0 (distance-score rows))])" "(reduce \\r\\n       (fn [acc weight]\\r\\n          (println weight)))\\r\\n       {} \\r\\n       ['(1.0 (frequecy-score rows))\\r\\n                  '(1.5 (location-score rows));{\:3 1.0, \:1 1.0}\\r\\n                  '(2.0 (distance-score rows))])" "(reduce \\r\\n       (fn [acc weight]\\r\\n          (println weight))\\r\\n       {} \\r\\n       ['(1.0 (frequecy-score rows))\\r\\n                  '(1.5 (location-score rows));{\:3 1.0, \:1 1.0}\\r\\n                  '(2.0 (distance-score rows))])" "(def w ['(1.0 (frequecy-score rows))\\r\\n                  '(1.5 (location-score rows));{\:3 1.0, \:1 1.0}\\r\\n                  '(2.0 (distance-score rows))])" "w" "(def w ['((frequecy-score rows))\\r\\n                  '((location-score rows));{\:3 1.0, \:1 1.0}\\r\\n                  '((distance-score rows))])" "w" "(def w [1.0 (frequecy-score rows)\\r\\n                  1.5 (location-score rows);{\:3 1.0, \:1 1.0}\\r\\n                  2.0 (distance-score rows)])" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}) [1 100 2])" "(contains? {} \:2)" "(if (\:2 {}) 1 2)" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}) [1 100 2])" "(key [\:3 1.0])" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}) [1 100 2])" "(frequecy-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\r\\n                       {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(location-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\r\\n                       {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(distance-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\r\\n                       {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}))" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}) [1 100 2])" "(if (\:2 {}) 1 2)" "(if (and (\:2 {}) (> 2 1)) 1 2)" "(pos? 0)" "(pos? 1)" "(dec 1)" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"7\\", \:url_id \\"1\\"}) [1 100 2])" "(get-scored-list '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n                    {\:location \\"12\\", \:location2 \\"19\\", \:url_id \\"1\\"}) [1 100 2])" "(frequecy-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n       {\:location \\"12\\", \:location2 \\"19\\", \:url_id \\"1\\"}) [1 100 2])" "(frequecy-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n       {\:location \\"12\\", \:location2 \\"19\\", \:url_id \\"1\\"}) )" "(location-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n          {\:location \\"12\\", \:location2 \\"19\\", \:url_id \\"1\\"}) )" "(distance-score '({\:location \\"20\\", \:location2 \\"17\\", \:url_id \\"3\\"} \\n              {\:location \\"12\\", \:location2 \\"19\\", \:url_id \\"1\\"}) )" "(query \\"google\\")" "(query \\"google rs\\")" "(query \\"google sign\\")" "(get-match-rows \\"google sign\\")" "(get-match-rows \\"sign\\")" "(get-match-rows \\"google\\")" "(db/select-all \\"word_list\\")" "(get-match-rows \\"Settings\\")" "(get-match-rows \\"Google Settings\\")" "(query \\"Google Settings\\")" "(get-match-rows \\"Google Sign\\")" "(get-match-rows \\"Google Play\\")" "(get-match-rows \\"Google\\")" "(query \\"Google\\")" "(get-scored-list {\:rows ({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"21\\", \:url_id \\"2\\"} {\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} {\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"} {\:location \\"237\\", \:url_id \\"7\\"} {\:location \\"269\\", \:url_id \\"7\\"} {\:location \\"2\\", \:url_id \\"8\\"} {\:location \\"13\\", \:url_id \\"8\\"} {\:location \\"30\\", \:url_id \\"8\\"} {\:location \\"41\\", \:url_id \\"8\\"} {\:location \\"62\\", \:url_id \\"8\\"} {\:location \\"86\\", \:url_id \\"8\\"} {\:location \\"115\\", \:url_id \\"8\\"} {\:location \\"0\\", \:url_id \\"9\\"} {\:location \\"43\\", \:url_id \\"9\\"} {\:location \\"53\\", \:url_id \\"9\\"} {\:location \\"66\\", \:url_id \\"9\\"} {\:location \\"99\\", \:url_id \\"9\\"} {\:location \\"125\\", \:url_id \\"9\\"} {\:location \\"137\\", \:url_id \\"9\\"} {\:location \\"176\\", \:url_id \\"9\\"} {\:location \\"11\\", \:url_id \\"10\\"} {\:location \\"36\\", \:url_id \\"10\\"} {\:location \\"41\\", \:url_id \\"10\\"} {\:location \\"332\\", \:url_id \\"10\\"} {\:location \\"339\\", \:url_id \\"10\\"} {\:location \\"396\\", \:url_id \\"10\\"} {\:location \\"0\\", \:url_id \\"12\\"} {\:location \\"330\\", \:url_id \\"12\\"} {\:location \\"334\\", \:url_id \\"12\\"} {\:location \\"430\\", \:url_id \\"12\\"} {\:location \\"1\\", \:url_id \\"14\\"} {\:location \\"11\\", \:url_id \\"14\\"} {\:location \\"41\\", \:url_id \\"14\\"} {\:location \\"17\\", \:url_id \\"15\\"} {\:location \\"42\\", \:url_id \\"15\\"} {\:location \\"65\\", \:url_id \\"15\\"} {\:location \\"356\\", \:url_id \\"15\\"} {\:location \\"363\\", \:url_id \\"15\\"} {\:location \\"377\\", \:url_id \\"15\\"} {\:location \\"483\\", \:url_id \\"15\\"} {\:location \\"33\\", \:url_id \\"16\\"} {\:location \\"0\\", \:url_id \\"17\\"} {\:location \\"15\\", \:url_id \\"17\\"} {\:location \\"26\\", \:url_id \\"17\\"} {\:location \\"42\\", \:url_id \\"17\\"} {\:location \\"131\\", \:url_id \\"17\\"} {\:location \\"157\\", \:url_id \\"17\\"} {\:location \\"0\\", \:url_id \\"18\\"} {\:location nil, \:url_id \\"18\\"} {\:location \\"0\\", \:url_id \\"19\\"}), \:word-ids [1]})" "(get-scored-list '{\:rows ({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"2\\"} {\:location \\"21\\", \:url_id \\"2\\"} {\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} {\:location \\"8\\", \:url_id \\"7\\"} {\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"} {\:location \\"237\\", \:url_id \\"7\\"} {\:location \\"269\\", \:url_id \\"7\\"} {\:location \\"2\\", \:url_id \\"8\\"} {\:location \\"13\\", \:url_id \\"8\\"}\\n                                                       {\:location \\"30\\", \:url_id \\"8\\"} \\n                                                       {\:location \\"41\\", \:url_id \\"8\\"} {\:location \\"62\\", \:url_id \\"8\\"} {\:location \\"86\\", \:url_id \\"8\\"} {\:location \\"115\\", \:url_id \\"8\\"} {\:location \\"0\\", \:url_id \\"9\\"} {\:location \\"43\\", \:url_id \\"9\\"} {\:location \\"53\\", \:url_id \\"9\\"} {\:location \\"66\\", \:url_id \\"9\\"} {\:location \\"99\\", \:url_id \\"9\\"} {\:location \\"125\\", \:url_id \\"9\\"} {\:location \\"137\\", \:url_id \\"9\\"} {\:location \\"176\\", \:url_id \\"9\\"} {\:location \\"11\\", \:url_id \\"10\\"} {\:location \\"36\\", \:url_id \\"10\\"} {\:location \\"41\\", \:url_id \\"10\\"} {\:location \\"332\\", \:url_id \\"10\\"} {\:location \\"339\\", \:url_id \\"10\\"} {\:location \\"396\\", \:url_id \\"10\\"} {\:location \\"0\\", \:url_id \\"12\\"} {\:location \\"330\\", \:url_id \\"12\\"} {\:location \\"334\\", \:url_id \\"12\\"} {\:location \\"430\\", \:url_id \\"12\\"} {\:location \\"1\\", \:url_id \\"14\\"} {\:location \\"11\\", \:url_id \\"14\\"} {\:location \\"41\\", \:url_id \\"14\\"} {\:location \\"17\\", \:url_id \\"15\\"} {\:location \\"42\\", \:url_id \\"15\\"} {\:location \\"65\\", \:url_id \\"15\\"} {\:location \\"356\\", \:url_id \\"15\\"} {\:location \\"363\\", \:url_id \\"15\\"} {\:location \\"377\\", \:url_id \\"15\\"} {\:location \\"483\\", \:url_id \\"15\\"} {\:location \\"33\\", \:url_id \\"16\\"} {\:location \\"0\\", \:url_id \\"17\\"} {\:location \\"15\\", \:url_id \\"17\\"} {\:location \\"26\\", \:url_id \\"17\\"} {\:location \\"42\\", \:url_id \\"17\\"} {\:location \\"131\\", \:url_id \\"17\\"} {\:location \\"157\\", \:url_id \\"17\\"} {\:location \\"0\\", \:url_id \\"18\\"} {\:location nil, \:url_id \\"18\\"} {\:location \\"0\\", \:url_id \\"19\\"}) [1])" "(get-scored-list '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"2\\"} \\n{\:location \\"21\\", \:url_id \\"2\\"} {\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} {\:location \\"8\\", \:url_id \\"7\\"} \\n{\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"} {\:location \\"237\\", \:url_id \\"7\\"} {\:location \\"269\\", \:url_id \\"7\\"} \\n{\:location \\"2\\", \:url_id \\"8\\"} {\:location \\"13\\", \:url_id \\"8\\"} {\:location \\"30\\", \:url_id \\"8\\"} {\:location \\"41\\", \:url_id \\"8\\"} \\n{\:location \\"62\\", \:url_id \\"8\\"} {\:location \\"86\\", \:url_id \\"8\\"} {\:location \\"115\\", \:url_id \\"8\\"} {\:location \\"0\\", \:url_id \\"9\\"} \\n{\:location \\"43\\", \:url_id \\"9\\"} {\:location \\"53\\", \:url_id \\"9\\"} {\:location \\"66\\", \:url_id \\"9\\"} {\:location \\"99\\", \:url_id \\"9\\"} \\n{\:location \\"125\\", \:url_id \\"9\\"} {\:location \\"137\\", \:url_id \\"9\\"} {\:location \\"176\\", \:url_id \\"9\\"} {\:location \\"11\\", \:url_id \\"10\\"} \\n{\:location \\"36\\", \:url_id \\"10\\"} {\:location \\"41\\", \:url_id \\"10\\"} {\:location \\"332\\", \:url_id \\"10\\"} {\:location \\"339\\", \:url_id \\"10\\"} \\n{\:location \\"396\\", \:url_id \\"10\\"} {\:location \\"0\\", \:url_id \\"12\\"} {\:location \\"330\\", \:url_id \\"12\\"} {\:location \\"334\\", \:url_id \\"12\\"} \\n{\:location \\"430\\", \:url_id \\"12\\"} {\:location \\"1\\", \:url_id \\"14\\"} {\:location \\"11\\", \:url_id \\"14\\"} {\:location \\"41\\", \:url_id \\"14\\"} \\n{\:location \\"17\\", \:url_id \\"15\\"} {\:location \\"42\\", \:url_id \\"15\\"} {\:location \\"65\\", \:url_id \\"15\\"} {\:location \\"356\\", \:url_id \\"15\\"} \\n{\:location \\"363\\", \:url_id \\"15\\"} {\:location \\"377\\", \:url_id \\"15\\"} {\:location \\"483\\", \:url_id \\"15\\"} {\:location \\"33\\", \:url_id \\"16\\"} \\n{\:location \\"0\\", \:url_id \\"17\\"} {\:location \\"15\\", \:url_id \\"17\\"} {\:location \\"26\\", \:url_id \\"17\\"} {\:location \\"42\\", \:url_id \\"17\\"} \\n{\:location \\"131\\", \:url_id \\"17\\"} {\:location \\"157\\", \:url_id \\"17\\"} {\:location \\"0\\", \:url_id \\"18\\"} {\:location nil, \:url_id \\"18\\"} \\n{\:location \\"0\\", \:url_id \\"19\\"}) [1])\\n\\n1" "(get-scored-list '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"2\\"} \\n{\:location \\"21\\", \:url_id \\"2\\"} {\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} {\:location \\"8\\", \:url_id \\"7\\"} \\n{\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"} {\:location \\"237\\", \:url_id \\"7\\"} {\:location \\"269\\", \:url_id \\"7\\"} \\n{\:location \\"2\\", \:url_id \\"8\\"} {\:location \\"13\\", \:url_id \\"8\\"} {\:location \\"30\\", \:url_id \\"8\\"} {\:location \\"41\\", \:url_id \\"8\\"} \\n{\:location \\"62\\", \:url_id \\"8\\"} {\:location \\"86\\", \:url_id \\"8\\"} {\:location \\"115\\", \:url_id \\"8\\"} {\:location \\"0\\", \:url_id \\"9\\"} \\n{\:location \\"43\\", \:url_id \\"9\\"} {\:location \\"53\\", \:url_id \\"9\\"} {\:location \\"66\\", \:url_id \\"9\\"} {\:location \\"99\\", \:url_id \\"9\\"} \\n{\:location \\"125\\", \:url_id \\"9\\"} {\:location \\"137\\", \:url_id \\"9\\"} {\:location \\"176\\", \:url_id \\"9\\"} {\:location \\"11\\", \:url_id \\"10\\"} \\n{\:location \\"36\\", \:url_id \\"10\\"} {\:location \\"41\\", \:url_id \\"10\\"} {\:location \\"332\\", \:url_id \\"10\\"} {\:location \\"339\\", \:url_id \\"10\\"} \\n{\:location \\"396\\", \:url_id \\"10\\"} {\:location \\"0\\", \:url_id \\"12\\"} {\:location \\"330\\", \:url_id \\"12\\"} {\:location \\"334\\", \:url_id \\"12\\"} \\n{\:location \\"430\\", \:url_id \\"12\\"} {\:location \\"1\\", \:url_id \\"14\\"} {\:location \\"11\\", \:url_id \\"14\\"} {\:location \\"41\\", \:url_id \\"14\\"} \\n{\:location \\"17\\", \:url_id \\"15\\"} {\:location \\"42\\", \:url_id \\"15\\"} {\:location \\"65\\", \:url_id \\"15\\"} {\:location \\"356\\", \:url_id \\"15\\"} \\n{\:location \\"363\\", \:url_id \\"15\\"} {\:location \\"377\\", \:url_id \\"15\\"} {\:location \\"483\\", \:url_id \\"15\\"} {\:location \\"33\\", \:url_id \\"16\\"} \\n{\:location \\"0\\", \:url_id \\"17\\"} {\:location \\"15\\", \:url_id \\"17\\"} {\:location \\"26\\", \:url_id \\"17\\"} {\:location \\"42\\", \:url_id \\"17\\"} \\n{\:location \\"131\\", \:url_id \\"17\\"} {\:location \\"157\\", \:url_id \\"17\\"} {\:location \\"0\\", \:url_id \\"18\\"} {\:location nil, \:url_id \\"18\\"} \\n{\:location \\"0\\", \:url_id \\"19\\"}) [1])" "(frequecy-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"2\\"} \\n{\:location \\"21\\", \:url_id \\"2\\"} {\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} {\:location \\"8\\", \:url_id \\"7\\"} \\n{\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"} {\:location \\"237\\", \:url_id \\"7\\"} {\:location \\"269\\", \:url_id \\"7\\"} \\n{\:location \\"2\\", \:url_id \\"8\\"} {\:location \\"13\\", \:url_id \\"8\\"} {\:location \\"30\\", \:url_id \\"8\\"} {\:location \\"41\\", \:url_id \\"8\\"} \\n{\:location \\"62\\", \:url_id \\"8\\"} {\:location \\"86\\", \:url_id \\"8\\"} {\:location \\"115\\", \:url_id \\"8\\"} {\:location \\"0\\", \:url_id \\"9\\"} \\n{\:location \\"43\\", \:url_id \\"9\\"} {\:location \\"53\\", \:url_id \\"9\\"} {\:location \\"66\\", \:url_id \\"9\\"} {\:location \\"99\\", \:url_id \\"9\\"} \\n{\:location \\"125\\", \:url_id \\"9\\"} {\:location \\"137\\", \:url_id \\"9\\"} {\:location \\"176\\", \:url_id \\"9\\"} {\:location \\"11\\", \:url_id \\"10\\"} \\n{\:location \\"36\\", \:url_id \\"10\\"} {\:location \\"41\\", \:url_id \\"10\\"} {\:location \\"332\\", \:url_id \\"10\\"} {\:location \\"339\\", \:url_id \\"10\\"} \\n{\:location \\"396\\", \:url_id \\"10\\"} {\:location \\"0\\", \:url_id \\"12\\"} {\:location \\"330\\", \:url_id \\"12\\"} {\:location \\"334\\", \:url_id \\"12\\"} \\n{\:location \\"430\\", \:url_id \\"12\\"} {\:location \\"1\\", \:url_id \\"14\\"} {\:location \\"11\\", \:url_id \\"14\\"} {\:location \\"41\\", \:url_id \\"14\\"} \\n{\:location \\"17\\", \:url_id \\"15\\"} {\:location \\"42\\", \:url_id \\"15\\"} {\:location \\"65\\", \:url_id \\"15\\"} {\:location \\"356\\", \:url_id \\"15\\"} \\n{\:location \\"363\\", \:url_id \\"15\\"} {\:location \\"377\\", \:url_id \\"15\\"} {\:location \\"483\\", \:url_id \\"15\\"} {\:location \\"33\\", \:url_id \\"16\\"} \\n{\:location \\"0\\", \:url_id \\"17\\"} {\:location \\"15\\", \:url_id \\"17\\"} {\:location \\"26\\", \:url_id \\"17\\"} {\:location \\"42\\", \:url_id \\"17\\"} \\n{\:location \\"131\\", \:url_id \\"17\\"} {\:location \\"157\\", \:url_id \\"17\\"} {\:location \\"0\\", \:url_id \\"18\\"} {\:location nil, \:url_id \\"18\\"} \\n{\:location \\"0\\", \:url_id \\"19\\"}) )" "(location-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"2\\"} \\n{\:location \\"21\\", \:url_id \\"2\\"} {\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} {\:location \\"8\\", \:url_id \\"7\\"} \\n{\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"} {\:location \\"237\\", \:url_id \\"7\\"} {\:location \\"269\\", \:url_id \\"7\\"} \\n{\:location \\"2\\", \:url_id \\"8\\"} {\:location \\"13\\", \:url_id \\"8\\"} {\:location \\"30\\", \:url_id \\"8\\"} {\:location \\"41\\", \:url_id \\"8\\"} \\n{\:location \\"62\\", \:url_id \\"8\\"} {\:location \\"86\\", \:url_id \\"8\\"} {\:location \\"115\\", \:url_id \\"8\\"} {\:location \\"0\\", \:url_id \\"9\\"} \\n{\:location \\"43\\", \:url_id \\"9\\"} {\:location \\"53\\", \:url_id \\"9\\"} {\:location \\"66\\", \:url_id \\"9\\"} {\:location \\"99\\", \:url_id \\"9\\"} \\n{\:location \\"125\\", \:url_id \\"9\\"} {\:location \\"137\\", \:url_id \\"9\\"} {\:location \\"176\\", \:url_id \\"9\\"} {\:location \\"11\\", \:url_id \\"10\\"} \\n{\:location \\"36\\", \:url_id \\"10\\"} {\:location \\"41\\", \:url_id \\"10\\"} {\:location \\"332\\", \:url_id \\"10\\"} {\:location \\"339\\", \:url_id \\"10\\"} \\n{\:location \\"396\\", \:url_id \\"10\\"} {\:location \\"0\\", \:url_id \\"12\\"} {\:location \\"330\\", \:url_id \\"12\\"} {\:location \\"334\\", \:url_id \\"12\\"} \\n{\:location \\"430\\", \:url_id \\"12\\"} {\:location \\"1\\", \:url_id \\"14\\"} {\:location \\"11\\", \:url_id \\"14\\"} {\:location \\"41\\", \:url_id \\"14\\"} \\n{\:location \\"17\\", \:url_id \\"15\\"} {\:location \\"42\\", \:url_id \\"15\\"} {\:location \\"65\\", \:url_id \\"15\\"} {\:location \\"356\\", \:url_id \\"15\\"} \\n{\:location \\"363\\", \:url_id \\"15\\"} {\:location \\"377\\", \:url_id \\"15\\"} {\:location \\"483\\", \:url_id \\"15\\"} {\:location \\"33\\", \:url_id \\"16\\"} \\n{\:location \\"0\\", \:url_id \\"17\\"} {\:location \\"15\\", \:url_id \\"17\\"} {\:location \\"26\\", \:url_id \\"17\\"} {\:location \\"42\\", \:url_id \\"17\\"} \\n{\:location \\"131\\", \:url_id \\"17\\"} {\:location \\"157\\", \:url_id \\"17\\"} {\:location \\"0\\", \:url_id \\"18\\"} {\:location nil, \:url_id \\"18\\"} \\n{\:location \\"0\\", \:url_id \\"19\\"}) )" "(distance-score '({\:location \\"0\\", \:url_id \\"1\\"} {\:location \\"20\\", \:url_id \\"1\\"} {\:location \\"0\\", \:url_id \\"2\\"} \\n{\:location \\"21\\", \:url_id \\"2\\"} {\:location \\"0\\", \:url_id \\"6\\"} {\:location \\"20\\", \:url_id \\"6\\"} {\:location \\"8\\", \:url_id \\"7\\"} \\n{\:location \\"126\\", \:url_id \\"7\\"} {\:location \\"200\\", \:url_id \\"7\\"} {\:location \\"237\\", \:url_id \\"7\\"} {\:location \\"269\\", \:url_id \\"7\\"} \\n{\:location \\"2\\", \:url_id \\"8\\"} {\:location \\"13\\", \:url_id \\"8\\"} {\:location \\"30\\", \:url_id \\"8\\"} {\:location \\"41\\", \:url_id \\"8\\"} \\n{\:location \\"62\\", \:url_id \\"8\\"} {\:location \\"86\\", \:url_id \\"8\\"} {\:location \\"115\\", \:url_id \\"8\\"} {\:location \\"0\\", \:url_id \\"9\\"} \\n{\:location \\"43\\", \:url_id \\"9\\"} {\:location \\"53\\", \:url_id \\"9\\"} {\:location \\"66\\", \:url_id \\"9\\"} {\:location \\"99\\", \:url_id \\"9\\"} \\n{\:location \\"125\\", \:url_id \\"9\\"} {\:location \\"137\\", \:url_id \\"9\\"} {\:location \\"176\\", \:url_id \\"9\\"} {\:location \\"11\\", \:url_id \\"10\\"} \\n{\:location \\"36\\", \:url_id \\"10\\"} {\:location \\"41\\", \:url_id \\"10\\"} {\:location \\"332\\", \:url_id \\"10\\"} {\:location \\"339\\", \:url_id \\"10\\"} \\n{\:location \\"396\\", \:url_id \\"10\\"} {\:location \\"0\\", \:url_id \\"12\\"} {\:location \\"330\\", \:url_id \\"12\\"} {\:location \\"334\\", \:url_id \\"12\\"} \\n{\:location \\"430\\", \:url_id \\"12\\"} {\:location \\"1\\", \:url_id \\"14\\"} {\:location \\"11\\", \:url_id \\"14\\"} {\:location \\"41\\", \:url_id \\"14\\"} \\n{\:location \\"17\\", \:url_id \\"15\\"} {\:location \\"42\\", \:url_id \\"15\\"} {\:location \\"65\\", \:url_id \\"15\\"} {\:location \\"356\\", \:url_id \\"15\\"} \\n{\:location \\"363\\", \:url_id \\"15\\"} {\:location \\"377\\", \:url_id \\"15\\"} {\:location \\"483\\", \:url_id \\"15\\"} {\:location \\"33\\", \:url_id \\"16\\"} \\n{\:location \\"0\\", \:url_id \\"17\\"} {\:location \\"15\\", \:url_id \\"17\\"} {\:location \\"26\\", \:url_id \\"17\\"} {\:location \\"42\\", \:url_id \\"17\\"} \\n{\:location \\"131\\", \:url_id \\"17\\"} {\:location \\"157\\", \:url_id \\"17\\"} {\:location \\"0\\", \:url_id \\"18\\"} {\:location nil, \:url_id \\"18\\"} \\n{\:location \\"0\\", \:url_id \\"19\\"}) )" "(pop (vec (vals {\:location \\"131\\", \:url_id \\"17\\"})))" "((Integer/parseInt (pop (vec (vals {\:location \\"131\\", \:url_id \\"17\\"}))))" "(Integer/parseInt (pop (vec (vals {\:location \\"131\\", \:url_id \\"17\\"}))))" "(Integer/parseInt (first (pop (vec \\n      (vals {\:location \\"131\\", \:url_id \\"17\\"})))))" "(java.lang.Integer/parseInt \\"0\\")" "(db/execute-query \\"select * from word_list where \\nlocation\=nil\\")" "(db/execute-query \\"select * from word_list where \\nlocation\='nil'\\")" "(db/execute-query \\"select * from word_list where \\nlocation\='0'\\")" "(db/execute-query \\"select * from \\nword_location where \\nlocation\='nil'\\")" "(db/execute-query \\"select * from \\nword_location where \\nlocation\='0'\\")" "(db/execute-query \\"select * from \\nword_location where \\nlocation\=null\\")" "(db/execute-query \\"select * from \\nword_location where \\nlocation is null\\")" "(db/execute-query \\"delete \\nword_location where \\nlocation is null\\")" "(db/execute-query \\n  \\"delete word_location \\nwhere location is null\\")" "(db/execute-query \\n  \\"delete from word_location \\nwhere location is null\\")" "(db/execute-query \\"select * from \\nword_location where \\nlocation is null\\")" "(jdbc/with-connection db-spec\\r\\n    (jdbc/delete-rows \\"word_location\\" \\"location is null\\"))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/delete-rows \\"word_location\\" [\\"location is null\\"]))" "(db/execute-query \\"select * from \\nword_location where \\nlocation is null\\")" "(execute-query \\"select * from \\nword_location where \\nlocation is null\\")" "(jdbc/with-connection db-spec\\r\\n    (jdbc/delete-rows \\"word_location\\" [\\"location is null\\"]))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/delete-rows \\"word_location\\" [\\"\:location\\" \\"nill\\"]))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/delete-rows \\"\:word_location\\" [\\"\:location\\" \\"nill\\"]))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/delete-rows \\"word_location\\" [\\"\:location\\" \\"nill\\"]))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/delete-rows \\"word_location\\" [\\"\:location\\" \\"null\\"]))" "(jdbc/with-connection db-spec\\r\\n    (jdbc/delete-rows \\"word_location\\" [\\"\:id\\" \\"117\\"]))" "(execute-query \\"select * from \\nword_location where \\nlocation is null\\")" "(execute-query \\"select * from \\nword_location \\")" "(execute-query \\"select * from \\nword_list \\")" "(get-match-rows \\"Drive\\")" "(db/create-db)" "(db/create-tables)" "(db/create-index)" "(crawl-final [\\"http\://www.google.com\\"\\n              \\"http\://www.google.es\\"\\n              \\"http\://www.google.si\\"])" "(db/execute-query \\"select * from \\nword_location \\")" "(db/execute-query \\"select * from \\nword_list \\")" "(query \\"Move\\")" "(query \\"Move Google\\")" "(query \\"Move Moja\\")" "(get-match-rows \\"Move Moja\\")" "(get-match-rows \\"Move\\")" "(get-match-rows \\"Moja\\")" "(get-match-rows \\"marker\\")" "(frequecy-score '({\:location \\"50\\", \:url_id \\"5\\"}))" "(get-match-rows \\"Gmail\\")" "(get-match-rows \\"Gmail Move\\")" "(query \\"Gmail Move\\")" "(get nil \:rows)" "(get-scored-list nil nil)" "(query \\"Gmail Move\\")" "(query \\"Move Moja\\")" "(query \\"Gmail\\")" "(query \\"Move\\")" "(query \\"Move Gmail\\")" "(get-match-rows \\"Move Gmail\\")" "(get-scored-list '({\:location_2 \\"16\\", \:location \\"50\\", \:url_id \\"5\\"}) [])" "(query \\"Google Gmail\\")" "(map \#(print %) [12 13])" "(map \#(str %) [12 13])" "(map \#(str %) {\:5 2.71875, \:4 4.071428571428571, \:3 4.25, \:2 3.718487394957983, \:1 4.25})" "(map \#(str (val %)) {\:5 2.71875, \:4 4.071428571428571, \:3 4.25, \:2 3.718487394957983, \:1 4.25})" "(map \#(str (get-url-name (key %)) (val %)) {\:5 2.71875, \:4 4.071428571428571, \:3 4.25, \:2 3.718487394957983, \:1 4.25})" "(get-url-name \\"4\\")" "(val [\:4 4.071428571428571])" "(query \\"Google Gmail\\")" "(with-out-str (println \\"this should return as a string\\"))" "(with-out-str \\"this should return as a string\\")" "(query \\"Google Gmail\\")" "(newline)" "(query \\"Google Gmail\\")" "(foo 1)" "(read-json)" "(json/write-str {\:a 1 \:b 2})" "(json/pprint {\:a 1 \:b 2})" "(json/json-str {\:a 1 \:b 2})" "(json/read-json {\:a 1 \:b 2})" "(json/read-str \\"{\:a 1 \:b 2}\\")" "(json/read-str \\"{a 1 b 2}\\")" "(json/read \\"{\:a 1}\\")" "(json/read (java.io.Reader \\n             \\"http\://api.thewalters.org/v1/objects.json?apikey\=4vyusmfXspfNUhVaDufgl8hxeGmoTWxZtLBL5AlGZF12KkVizFhFcbFwD0Gc0r3L&classification\=print\\")  \\"{\:a 1}\\")" "(json/read (clojure.java.io/reader \\n \\"http\://api.thewalters.org/v1/objects.json?apikey\=4vyusmfXspfNUhVaDufgl8hxeGmoTWxZtLBL5AlGZF12KkVizFhFcbFwD0Gc0r3L&classification\=print\\")" "(json/read (clojure.java.io/reader \\n \\"http\://api.thewalters.org/v1/objects.json?apikey\=4vyusmfXspfNUhVaDufgl8hxeGmoTWxZtLBL5AlGZF12KkVizFhFcbFwD0Gc0r3L&classification\=print\\"))" "(clojure.java.io/reader \\n \\"http\://api.thewalters.org/v1/objects.json?apikey\=4vyusmfXspfNUhVaDufgl8hxeGmoTWxZtLBL5AlGZF12KkVizFhFcbFwD0Gc0r3L&classification\=print&pageSize\=2\\")" "(json/read (clojure.java.io/reader \\n \\"http\://api.thewalters.org/v1/objects.json?apikey\=4vyusmfXspfNUhVaDufgl8hxeGmoTWxZtLBL5AlGZF12KkVizFhFcbFwD0Gc0r3L&classification\=print&pageSize\=2\\"))"]
eclipse.preferences.version=1
